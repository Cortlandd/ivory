-- # -*- mode: haskell -*-

-- Define a top-level expression
bar = 3 + 2;

-- Define a top-level type alias.
type Boo = int8_t;

-- Use the expression and alias
Boo foo(Boo x) {
  return (bar + x);
}

-- Calling builtin functions
void foo67(* float a)
{ *a = sin(*a);
}

-- if-the-else blocks.  Braces are mandatory.
int32_t foo1() {
  if (true) {
    let a = 5;
    return a;
  }
  else {
    let b = 3;
    return b + 3;
  }
}

-- Empty statemnts in if-then-else
void foo30(Boo x) {
  if(true) {}
  else { return; }
  return;
}

-- Allocation on the stack (dereference is an expression)
int32_t foo0() {
  alloc *x = 3;
  *x = 4;
  return *x + 4;
}

-- Global allocation (G), stack allocation (S), and undetermined scope (var c)
uint8_t foo12(* uint8_t a, G*uint8_t b, * uint8_t c, S* uint8_t d) {
  *b = *a;
  return *b + *c + *d;
}

-- Allocated on either the stack or globally, with user-provided type-variable (xx).
xx* uint32_t foo14(xx* struct Foo f) {
  let a = f . aBar;
  let u = a @ 2;
  return u;
}

-- Allocate an array and index into it. A precondition is given for the function
-- argument.
uint32_t foo6(v *uint32_t[3] arr0) {
  alloc arr1[] = {1,2,3};
  map ix {
    *arr0 @ ix = *arr1 @ ix;
  }
  -- Same as *arr0 @ 1 ;
  return arr0[1] ;
}
{ pre(arr0[1] > 0);
}

-- Define a struct.
struct Bar00 {
  int32_t aBar00;
}

-- Use a struct. Polymorphic region reference.
void foo00(* int32_t[5] arr, * struct Bar00 str) {
  -- The following two are equivalent
  * arr @ 2   = 3;
    arr[2]    = 4;
  -- As well as the next two
  *str.aBar00 = 1;
  str->aBar00 = 2;

  arr[2]      = arr[3];
}

-- Boolean operators
uint32_t foo7(bool b, uint32_t a) {
    return (b && !b ? a+3 : signum(abs(a)) - 4);
}

void foo2() {return;}

-- Function calls, with a return value and without.
uint32_t foo8(bool b, uint32_t a) {
    foo2();
    x = foo7(b, a);
    foo7 (b, a);
    return (b && !b ? a+3 : signum(abs(a)) - x);
}

-- Local assignment (constant).
uint32_t foo9(uint32_t a) {
  forever {
    let b = a + 3;
    return b;
  }
  return 0;
}

-- Memcopy.
void foo10(*uint32_t[3] r0, *uint32_t[3] r1) {
  memcpy r0 r1;
}

-- Const decorators.
uint32_t foo11(const *uint32_t i) {
  return *i;
}

-- Pre and post conditions.
uint32_t foo15(uint32_t a, * struct Foo f, * struct Foo g) {
        return a;
}
{ pre(a < 4);
  pre(a > 0);
  post(return > 5);
  pre(* f . aFoo && * g . aFoo);
}

-- Stack allocated variable.
uint32_t foo16(S*uint32_t i) {
  return *i;
}
{ pre(*i > 3); }

-- Global allocated variable.
uint32_t foo17(G*uint32_t i) {
  return *i;
}

-- Struct declared with Haskell types (and type alias in Haskell)
struct Foo
 { aBar :: Array 4 (Stored SomeInt)
 ; aFoo :: Stored IBool
 }

-- Struct declared with C-like types
struct Goo
 { int32_t aGoo;
   bool bGoo;
   int32_t[4] cGoo;
 }

-- Safe string structs: strings of max length 16 bytes Generates two field
-- labels: stringLengthL (int32_t) and stringDataL (array uint8_t[16]). The type
-- of the struct is ivory_string_FooStr. See the String library in ivory-stdlib
-- for some string library functions.
string struct FooStr 16

-- Nested struct references
struct Foo2
  { foo2f :: Struct Foo
  }

-- Abstract structs
abstract struct fooStruct "foobar/foo.h"

-- Mapping over an array
void mapProc(*uint8_t[4] arr, uint8_t x) {
  map ix {
    let v = arr @ ix;
    *v = *v + x;
  }
}

-- Casting
void foo57(* uint8_t a, * uint16_t b, * int8_t c, * int32_t d)
{
  *b = safeCast(*a);     -- can always safely cast
  *b = castWith(3, *d);  -- cast with a default value if out of range
  *c = twosCompCast(*a); -- interpret under 2s compliment
}

-- Statements and expression macros
int32_t foo68(int32_t x, int32_t y) {
  -- macroStmts is a Haskell function
  $macroStmts(x, y);
  -- with a return value (Ivory eff a)
  a <- $macroStmtsRet(x, y);
  -- macroExp is a Haskell function, too
  if($macroExp(x, y)) { return x; }
  else { return a; }
}

------------------------------------------------------------
-- Larger example (hypothetical pack and unpack functions). In practice, use
-- ivory-serialize.
int32_t unpackSint32(uint8_t a, uint8_t b, uint8_t c, uint8_t d)
{
  alloc *x = 0;
  *x = safeCast(a) | safeCast(b) << 0x8 | safeCast(c) << 0x10 | safeCast(d) << 0x18;
  return twosCompCast(*x);
}

int32_t unpack(* uint8_t[10] msg, int32_t ixx)
{
 let ix = toIx(ixx);
 res = unpackSint32( * msg @ ix
                   , * msg @ (ix+1)
                   , * msg @ (ix+2)
                   , * msg @ (ix+3)
                   );
 return res;
}

void pack(*uint8_t[10] msg, int32_t x, int32_t ixx)
{
  let ix = toIx(ixx);
  let ux = twosCompRep(x);
  * msg @ ix     = bitCast(ux);
  * msg @ (ix+1) = bitCast(ux >> 0x08);
  * msg @ (ix+2) = bitCast(ux >> 0x10);
  * msg @ (ix+3) = bitCast(ux >> 0x18);
}

------------------------------------------------------------
